Title:Facemesh/Face-Landmarks-Detection memory comparison

Body:I’ve been digging into finding a non-leaky way to use Face Landmarks Detections / facemesh.I’ve tested several different approaches all with demo code (no modifications) on chrome on osx using the webgl backend. Here is all the info about my testing incase it helps someone else. In each case; I ran the programs for 10 minutes and polled the JS heap size and GPU Process size (chrome task manager) every minute. ### Face Landmarks Detections [Demo](https://github.com/tensorflow/tfjs-models/tree/master/face-landmarks-detection/demo) including the library via script tags/ unpkgVersions: ```tfjs-core@3.1.0tfjs-converter@3.1.0tfjs-backend-webgl@3.1.0tfjs-backend-cpu@3.1.0face-landmarks-detection@0.0.3```Result: ![Screen Shot 2021-11-15 at 7 11 14 PM](https://user-images.githubusercontent.com/3160465/141878431-88fd2fa8-a0e8-4f14-bc1d-5632917d24b0.png)Heap sizes`20.1;27.8;35.3;45.1;53.5;59.4;96.5;73.7;82.0;88.9`Delta- 68.8 mbGPU Process sizes `345;442;551;673;814;943;1000;1200;1300;1400`Delta- 1055 mbConclusion - significant memory problem. Has crashed chrome and caused the system to run out of memory frequently. ### Face Landmarks Detections [Demo](https://github.com/tensorflow/tfjs-models/tree/master/face-landmarks-detection/demo) using NPM/Yarn/build tools in repoVersions: ```    face-landmarks-detection": "link:../dist";    "@tensorflow/tfjs-backend-wasm": "^3.1.0";    "@tensorflow/tfjs-backend-webgl": "^3.1.0";    "@tensorflow/tfjs-backend-cpu": "^3.1.0";    "@tensorflow/tfjs-converter": "^3.1.0";    "@tensorflow/tfjs-core": "^3.1.0";```Result: ![Screen Shot 2021-11-15 at 6 54 16 PM](https://user-images.githubusercontent.com/3160465/141879236-f0d2bfac-0122-44c3-af0d-d87f436f1560.png)Heap sizes`17.3;18.9;18.7; 19.4;19.6;19.2;19.7;19.8;19.9`Delta- 2.6 mbGPU Process sizes `314;317;318;318;318;319;320;320;320`Delta- 6mbConclusion - still increases; but best option. Is it simply including via NPM or is it also about all the dev tools (babel; rollup; rollup; esbuild; yarn; etc ) that are being used?### Face Mesh [demo](https://codepen.io/mediapipe/pen/KKgVaPJ) run on a local server with linked / non-npm dependenciesVersions```camera_utils@0.3control_utils@0.6drawing_utils@0.3face_mesh@0.4```Result:![Screen Shot 2021-11-15 at 4 15 50 PM](https://user-images.githubusercontent.com/3160465/141879662-9ce94fa5-63f7-46f0-a1c6-0c6e70255286.png)Heap size`31.4;50.3;76.1;88.7;104;121;143;168;168;199`Delta - 167.6 mbGPU Process sizes `240 - 286 `Delta - 46 mb[More info on this issue](https://github.com/google/mediapipe/issues/1937#issuecomment-969348179)- also likely relevant thread about the details of webgl and memory. | demo+links heap delta | demo+links GPU delta | demo+npm heap delta | demo+npm GPU delta | facemesh heap delta | facemesh GPU delta ||-----------------------|----------------------|---------------------|--------------------|---------------------|--------------------|| 68.8 mb               | 1055 mb              | 2.6 mb              | 6 mb               | 167.6 mb            | 46   mb            |To my non expert eyes - using npm + the dev dependencies seems to be the secret sauce. Which of these dev dependencies are making the difference if any? Why is that approach so much better? 

Comment:['Hi there; Checking in about this. @mattsoulanille Any thoughts on why the memory management is so different with and without the dev dependencies? =====']